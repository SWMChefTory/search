name: Java CI with Gradle


on:
  push:
    branches: [ "prod" ]

permissions:
  contents: read

jobs:
  build-docker-image:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      #  Docker 이미지 빌드
      - name: docker image build
        run: docker build -f ./docker/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-opensearch .

      #  DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      #  Docker Hub 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-opensearch

  # ec2에 배포
  deploy:
    environment: prodelop
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SSH to EC2 and create folder
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p cheftory-search
            mkdir -p cheftory-search/logstash/pipeline
            mkdir -p cheftory-search/logstash/sql
            mkdir -p cheftory-search/logstash/drivers
            mkdir -p cheftory-search/logstash/templates
            mkdir -p cheftory-search/opensearch

      - name: Create .env on EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/cheftory-search
            cat <<EOF > .env
            COMPOSE_PROJECT_NAME=cheftory
            OPENSEARCH_INITIAL_ADMIN_PASSWORD=${{ secrets.OPENSEARCH_INITIAL_ADMIN_PASSWORD }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            OPENSEARCH_HOST=${{ secrets.OPENSEARCH_HOST }}
            OPENSEARCH_PORT=${{ secrets.OPENSEARCH_PORT }}
            OPENSEARCH_USERNAME=${{ secrets.OPENSEARCH_USERNAME }}
            DATABASE_HOST=${{ secrets.DATABASE_HOST }}
            DATABASE_PORT=${{ secrets.DATABASE_PORT }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            EOF

      - name: Copy docker-compose.dev.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker/docker-compose.dev.yml"
          target: "/home/ubuntu/cheftory-search"
          strip_components: 1

      - name: Copy opensearch config to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "opensearch/opensearch.yml"
          target: "/home/${{ secrets.EC2_USER }}/cheftory-search"

      - name: Copy logstash pipeline to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "logstash/pipeline/*"
          target: "/home/${{ secrets.EC2_USER }}/cheftory-search"

      - name: Copy logstash sql to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "logstash/sql/*"
          target: "/home/${{ secrets.EC2_USER }}/cheftory-search"

      - name: Copy logstash drivers to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "logstash/drivers/*"
          target: "/home/${{ secrets.EC2_USER }}/cheftory-search"

      - name: Copy logstash templates to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "logstash/templates/*"
          target: "/home/${{ secrets.EC2_USER }}/cheftory-search"

      - name: Copy logstash pipelines.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "logstash/pipelines.yml"
          target: "/home/${{ secrets.EC2_USER }}/cheftory-search"

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd cheftory-search

            # Docker Hub에 로그인
            echo ${{ secrets.DOCKERHUB_PASSWORD }} | sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            # docker-compose.prod.yml에서 이미지 이름 수정
            sed -i "s|image: cheftory-opensearch:latest|image: ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-opensearch:latest|g" docker-compose.prod.yml

            # 기존 컨테이너 정리
            sudo docker-compose -f docker-compose.prod.yml stop || true
            sudo docker-compose -f docker-compose.prod.yml rm -f || true
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/cheftory-opensearch:latest || true

            # 새 이미지 pull 및 실행
            sudo docker-compose -f docker-compose.prod.yml pull
            sudo docker-compose -f docker-compose.prod.yml up -d